{"ast":null,"code":"\"use strict\";\n\n// Copyright 2024 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SpeechClient = void 0;\nconst stream_1 = require(\"stream\");\nconst jsonProtos = require(\"../../protos/protos.json\");\n/**\n * Client JSON configuration object, loaded from\n * `src/v1p1beta1/speech_client_config.json`.\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\nconst gapicConfig = require(\"./speech_client_config.json\");\nconst version = require('../../../package.json').version;\n/**\n *  Service that implements Google Cloud Speech API.\n * @class\n * @memberof v1p1beta1\n */\nclass SpeechClient {\n  /**\n   * Construct an instance of SpeechClient.\n   *\n   * @param {object} [options] - The configuration object.\n   * The options accepted by the constructor are described in detail\n   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).\n   * The common options are:\n   * @param {object} [options.credentials] - Credentials object.\n   * @param {string} [options.credentials.client_email]\n   * @param {string} [options.credentials.private_key]\n   * @param {string} [options.email] - Account email address. Required when\n   *     using a .pem or .p12 keyFilename.\n   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n   *     .p12 key downloaded from the Google Developers Console. If you provide\n   *     a path to a JSON file, the projectId option below is not necessary.\n   *     NOTE: .pem and .p12 require you to specify options.email as well.\n   * @param {number} [options.port] - The port on which to connect to\n   *     the remote host.\n   * @param {string} [options.projectId] - The project ID from the Google\n   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n   *     the environment variable GCLOUD_PROJECT for your project ID. If your\n   *     app is running in an environment which supports\n   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n   *     your project ID will be detected automatically.\n   * @param {string} [options.apiEndpoint] - The domain name of the\n   *     API remote host.\n   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n   *     Follows the structure of {@link gapicConfig}.\n   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.\n   *     For more information, please check the\n   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.\n   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you\n   *     need to avoid loading the default gRPC version and want to use the fallback\n   *     HTTP implementation. Load only fallback version and pass it to the constructor:\n   *     ```\n   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC\n   *     const client = new SpeechClient({fallback: true}, gax);\n   *     ```\n   */\n  constructor(opts, gaxInstance) {\n    var _a, _b, _c, _d, _e;\n    this._terminated = false;\n    this.descriptors = {\n      page: {},\n      stream: {},\n      longrunning: {},\n      batching: {}\n    };\n    // Ensure that options include all the required fields.\n    const staticMembers = this.constructor;\n    if ((opts === null || opts === void 0 ? void 0 : opts.universe_domain) && (opts === null || opts === void 0 ? void 0 : opts.universeDomain) && (opts === null || opts === void 0 ? void 0 : opts.universe_domain) !== (opts === null || opts === void 0 ? void 0 : opts.universeDomain)) {\n      throw new Error('Please set either universe_domain or universeDomain, but not both.');\n    }\n    const universeDomainEnvVar = typeof process === 'object' && typeof process.env === 'object' ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] : undefined;\n    this._universeDomain = (_c = (_b = (_a = opts === null || opts === void 0 ? void 0 : opts.universeDomain) !== null && _a !== void 0 ? _a : opts === null || opts === void 0 ? void 0 : opts.universe_domain) !== null && _b !== void 0 ? _b : universeDomainEnvVar) !== null && _c !== void 0 ? _c : 'googleapis.com';\n    this._servicePath = 'speech.' + this._universeDomain;\n    const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || this._servicePath;\n    this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));\n    const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n    const clientConfig = (_d = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _d !== void 0 ? _d : {};\n    const fallback = (_e = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _e !== void 0 ? _e : typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function';\n    opts = Object.assign({\n      servicePath,\n      port,\n      clientConfig,\n      fallback\n    }, opts);\n    // Request numeric enum values if REST transport is used.\n    opts.numericEnums = true;\n    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n    if (servicePath !== this._servicePath && !('scopes' in opts)) {\n      opts['scopes'] = staticMembers.scopes;\n    }\n    // Load google-gax module synchronously if needed\n    if (!gaxInstance) {\n      gaxInstance = require('google-gax');\n    }\n    // Choose either gRPC or proto-over-HTTP implementation of google-gax.\n    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;\n    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.\n    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);\n    // Save options to use in initialize() method.\n    this._opts = opts;\n    // Save the auth object to the client, for use by other methods.\n    this.auth = this._gaxGrpc.auth;\n    // Set useJWTAccessWithScope on the auth object.\n    this.auth.useJWTAccessWithScope = true;\n    // Set defaultServicePath on the auth object.\n    this.auth.defaultServicePath = this._servicePath;\n    // Set the default scopes in auth client if needed.\n    if (servicePath === this._servicePath) {\n      this.auth.defaultScopes = staticMembers.scopes;\n    }\n    // Determine the client header string.\n    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n    if (typeof process === 'object' && 'versions' in process) {\n      clientHeader.push(`gl-node/${process.versions.node}`);\n    } else {\n      clientHeader.push(`gl-web/${this._gaxModule.version}`);\n    }\n    if (!opts.fallback) {\n      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n    } else {\n      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);\n    }\n    if (opts.libName && opts.libVersion) {\n      clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n    }\n    // Load the applicable protos.\n    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);\n    // This API contains \"path templates\"; forward-slash-separated\n    // identifiers to uniquely identify resources within the API.\n    // Create useful helper objects for these.\n    this.pathTemplates = {\n      customClassPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/customClasses/{custom_class}'),\n      phraseSetPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/phraseSets/{phrase_set}')\n    };\n    // Some of the methods on this service provide streaming responses.\n    // Provide descriptors for these.\n    this.descriptors.stream = {\n      streamingRecognize: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.BIDI_STREAMING, !!opts.fallback, /* gaxStreamingRetries: */false)\n    };\n    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);\n    // This API contains \"long-running operations\", which return a\n    // an Operation object that allows for tracking of the operation,\n    // rather than holding a request open.\n    const lroOptions = {\n      auth: this.auth,\n      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined\n    };\n    if (opts.fallback) {\n      lroOptions.protoJson = protoFilesRoot;\n      lroOptions.httpRules = [{\n        selector: 'google.longrunning.Operations.GetOperation',\n        get: '/v1p1beta1/operations/{name=**}'\n      }, {\n        selector: 'google.longrunning.Operations.ListOperations',\n        get: '/v1p1beta1/operations'\n      }];\n    }\n    this.operationsClient = this._gaxModule.lro(lroOptions).operationsClient(opts);\n    const longRunningRecognizeResponse = protoFilesRoot.lookup('.google.cloud.speech.v1p1beta1.LongRunningRecognizeResponse');\n    const longRunningRecognizeMetadata = protoFilesRoot.lookup('.google.cloud.speech.v1p1beta1.LongRunningRecognizeMetadata');\n    this.descriptors.longrunning = {\n      longRunningRecognize: new this._gaxModule.LongrunningDescriptor(this.operationsClient, longRunningRecognizeResponse.decode.bind(longRunningRecognizeResponse), longRunningRecognizeMetadata.decode.bind(longRunningRecognizeMetadata))\n    };\n    // Put together the default options sent with requests.\n    this._defaults = this._gaxGrpc.constructSettings('google.cloud.speech.v1p1beta1.Speech', gapicConfig, opts.clientConfig || {}, {\n      'x-goog-api-client': clientHeader.join(' ')\n    });\n    // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n    this.innerApiCalls = {};\n    // Add a warn function to the client constructor so it can be easily tested.\n    this.warn = this._gaxModule.warn;\n  }\n  /**\n   * Initialize the client.\n   * Performs asynchronous operations (such as authentication) and prepares the client.\n   * This function will be called automatically when any class method is called for the\n   * first time, but if you need to initialize it before calling an actual method,\n   * feel free to call initialize() directly.\n   *\n   * You can await on this method if you want to make sure the client is initialized.\n   *\n   * @returns {Promise} A promise that resolves to an authenticated service stub.\n   */\n  initialize() {\n    var _this = this;\n    // If the client stub promise is already initialized, return immediately.\n    if (this.speechStub) {\n      return this.speechStub;\n    }\n    // Put together the \"service stub\" for\n    // google.cloud.speech.v1p1beta1.Speech.\n    this.speechStub = this._gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService('google.cloud.speech.v1p1beta1.Speech') :\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this._protos.google.cloud.speech.v1p1beta1.Speech, this._opts, this._providedCustomServicePath);\n    // Iterate over each of the methods that the service provides\n    // and create an API call method for each.\n    const speechStubMethods = ['recognize', 'longRunningRecognize', 'streamingRecognize'];\n    for (const methodName of speechStubMethods) {\n      const callPromise = this.speechStub.then(stub => function () {\n        if (_this._terminated) {\n          if (methodName in _this.descriptors.stream) {\n            const stream = new stream_1.PassThrough();\n            setImmediate(() => {\n              stream.emit('error', new _this._gaxModule.GoogleError('The client has already been closed.'));\n            });\n            return stream;\n          }\n          return Promise.reject('The client has already been closed.');\n        }\n        const func = stub[methodName];\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        return func.apply(stub, args);\n      }, err => () => {\n        throw err;\n      });\n      const descriptor = this.descriptors.stream[methodName] || this.descriptors.longrunning[methodName] || undefined;\n      const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);\n      this.innerApiCalls[methodName] = apiCall;\n    }\n    return this.speechStub;\n  }\n  /**\n   * The DNS address for this API service.\n   * @deprecated Use the apiEndpoint method of the client instance.\n   * @returns {string} The DNS address for this service.\n   */\n  static get servicePath() {\n    if (typeof process === 'object' && typeof process.emitWarning === 'function') {\n      process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');\n    }\n    return 'speech.googleapis.com';\n  }\n  /**\n   * The DNS address for this API service - same as servicePath.\n   * @deprecated Use the apiEndpoint method of the client instance.\n   * @returns {string} The DNS address for this service.\n   */\n  static get apiEndpoint() {\n    if (typeof process === 'object' && typeof process.emitWarning === 'function') {\n      process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');\n    }\n    return 'speech.googleapis.com';\n  }\n  /**\n   * The DNS address for this API service.\n   * @returns {string} The DNS address for this service.\n   */\n  get apiEndpoint() {\n    return this._servicePath;\n  }\n  get universeDomain() {\n    return this._universeDomain;\n  }\n  /**\n   * The port for this API service.\n   * @returns {number} The default port for this service.\n   */\n  static get port() {\n    return 443;\n  }\n  /**\n   * The scopes needed to make gRPC calls for every method defined\n   * in this service.\n   * @returns {string[]} List of default scopes.\n   */\n  static get scopes() {\n    return ['https://www.googleapis.com/auth/cloud-platform'];\n  }\n  /**\n   * Return the project ID used by this class.\n   * @returns {Promise} A promise that resolves to string containing the project ID.\n   */\n  getProjectId(callback) {\n    if (callback) {\n      this.auth.getProjectId(callback);\n      return;\n    }\n    return this.auth.getProjectId();\n  }\n  recognize(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    this.initialize();\n    return this.innerApiCalls.recognize(request, options, callback);\n  }\n  /**\n   * Performs bidirectional streaming speech recognition: receive results while\n   * sending audio. This method is only available via the gRPC API (not REST).\n   *\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Stream}\n   *   An object stream which is both readable and writable. It accepts objects\n   *   representing {@link protos.google.cloud.speech.v1p1beta1.StreamingRecognizeRequest|StreamingRecognizeRequest} for write() method, and\n   *   will emit objects representing {@link protos.google.cloud.speech.v1p1beta1.StreamingRecognizeResponse|StreamingRecognizeResponse} on 'data' event asynchronously.\n   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#bi-directional-streaming | documentation }\n   *   for more details and examples.\n   * @example <caption>include:samples/generated/v1p1beta1/speech.streaming_recognize.js</caption>\n   * region_tag:speech_v1p1beta1_generated_Speech_StreamingRecognize_async\n   */\n  _streamingRecognize(options) {\n    this.initialize();\n    return this.innerApiCalls.streamingRecognize(null, options);\n  }\n  longRunningRecognize(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    this.initialize();\n    return this.innerApiCalls.longRunningRecognize(request, options, callback);\n  }\n  /**\n   * Check the status of the long running operation returned by `longRunningRecognize()`.\n   * @param {String} name\n   *   The operation name that will be passed.\n   * @returns {Promise} - The promise which resolves to an object.\n   *   The decoded operation object has result and metadata field to get information from.\n   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }\n   *   for more details and examples.\n   * @example <caption>include:samples/generated/v1p1beta1/speech.long_running_recognize.js</caption>\n   * region_tag:speech_v1p1beta1_generated_Speech_LongRunningRecognize_async\n   */\n  async checkLongRunningRecognizeProgress(name) {\n    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({\n      name\n    });\n    const [operation] = await this.operationsClient.getOperation(request);\n    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.longRunningRecognize, this._gaxModule.createDefaultBackoffSettings());\n    return decodeOperation;\n  }\n  /**\n   * Gets the latest state of a long-running operation.  Clients can use this\n   * method to poll the operation result at intervals as recommended by the API\n   * service.\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation resource.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   *   e.g, timeout, retries, paginations, etc. See {@link\n   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}\n   *   for the details.\n   * @param {function(?Error, ?Object)=} callback\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing\n   *   {@link google.longrunning.Operation | google.longrunning.Operation}.\n   * @return {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing\n   * {@link google.longrunning.Operation | google.longrunning.Operation}.\n   * The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   * ```\n   * const client = longrunning.operationsClient();\n   * const name = '';\n   * const [response] = await client.getOperation({name});\n   * // doThingsWith(response)\n   * ```\n   */\n  getOperation(request, options, callback) {\n    return this.operationsClient.getOperation(request, options, callback);\n  }\n  /**\n   * Lists operations that match the specified filter in the request. If the\n   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.\n   *\n   * For-await-of syntax is used with the iterable to recursively get response element on-demand.\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation collection.\n   * @param {string} request.filter - The standard list filter.\n   * @param {number=} request.pageSize -\n   *   The maximum number of resources contained in the underlying API\n   *   response. If page streaming is performed per-resource, this\n   *   parameter does not affect the return value. If page streaming is\n   *   performed per-page, this determines the maximum number of\n   *   resources in a page.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   *   e.g, timeout, retries, paginations, etc. See {@link\n   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the\n   *   details.\n   * @returns {Object}\n   *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.\n   *\n   * @example\n   * ```\n   * const client = longrunning.operationsClient();\n   * for await (const response of client.listOperationsAsync(request));\n   * // doThingsWith(response)\n   * ```\n   */\n  listOperationsAsync(request, options) {\n    return this.operationsClient.listOperationsAsync(request, options);\n  }\n  /**\n   * Starts asynchronous cancellation on a long-running operation.  The server\n   * makes a best effort to cancel the operation, but success is not\n   * guaranteed.  If the server doesn't support this method, it returns\n   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use\n   * {@link Operations.GetOperation} or\n   * other methods to check whether the cancellation succeeded or whether the\n   * operation completed despite cancellation. On successful cancellation,\n   * the operation is not deleted; instead, it becomes an operation with\n   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of\n   * 1, corresponding to `Code.CANCELLED`.\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation resource to be cancelled.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   * e.g, timeout, retries, paginations, etc. See {@link\n   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the\n   * details.\n   * @param {function(?Error)=} callback\n   *   The function which will be called with the result of the API call.\n   * @return {Promise} - The promise which resolves when API call finishes.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API\n   * call.\n   *\n   * @example\n   * ```\n   * const client = longrunning.operationsClient();\n   * await client.cancelOperation({name: ''});\n   * ```\n   */\n  cancelOperation(request, options, callback) {\n    return this.operationsClient.cancelOperation(request, options, callback);\n  }\n  /**\n   * Deletes a long-running operation. This method indicates that the client is\n   * no longer interested in the operation result. It does not cancel the\n   * operation. If the server doesn't support this method, it returns\n   * `google.rpc.Code.UNIMPLEMENTED`.\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation resource to be deleted.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   * e.g, timeout, retries, paginations, etc. See {@link\n   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}\n   * for the details.\n   * @param {function(?Error)=} callback\n   *   The function which will be called with the result of the API call.\n   * @return {Promise} - The promise which resolves when API call finishes.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API\n   * call.\n   *\n   * @example\n   * ```\n   * const client = longrunning.operationsClient();\n   * await client.deleteOperation({name: ''});\n   * ```\n   */\n  deleteOperation(request, options, callback) {\n    return this.operationsClient.deleteOperation(request, options, callback);\n  }\n  // --------------------\n  // -- Path templates --\n  // --------------------\n  /**\n   * Return a fully-qualified customClass resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @param {string} custom_class\n   * @returns {string} Resource name string.\n   */\n  customClassPath(project, location, customClass) {\n    return this.pathTemplates.customClassPathTemplate.render({\n      project: project,\n      location: location,\n      custom_class: customClass\n    });\n  }\n  /**\n   * Parse the project from CustomClass resource.\n   *\n   * @param {string} customClassName\n   *   A fully-qualified path representing CustomClass resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromCustomClassName(customClassName) {\n    return this.pathTemplates.customClassPathTemplate.match(customClassName).project;\n  }\n  /**\n   * Parse the location from CustomClass resource.\n   *\n   * @param {string} customClassName\n   *   A fully-qualified path representing CustomClass resource.\n   * @returns {string} A string representing the location.\n   */\n  matchLocationFromCustomClassName(customClassName) {\n    return this.pathTemplates.customClassPathTemplate.match(customClassName).location;\n  }\n  /**\n   * Parse the custom_class from CustomClass resource.\n   *\n   * @param {string} customClassName\n   *   A fully-qualified path representing CustomClass resource.\n   * @returns {string} A string representing the custom_class.\n   */\n  matchCustomClassFromCustomClassName(customClassName) {\n    return this.pathTemplates.customClassPathTemplate.match(customClassName).custom_class;\n  }\n  /**\n   * Return a fully-qualified phraseSet resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @param {string} phrase_set\n   * @returns {string} Resource name string.\n   */\n  phraseSetPath(project, location, phraseSet) {\n    return this.pathTemplates.phraseSetPathTemplate.render({\n      project: project,\n      location: location,\n      phrase_set: phraseSet\n    });\n  }\n  /**\n   * Parse the project from PhraseSet resource.\n   *\n   * @param {string} phraseSetName\n   *   A fully-qualified path representing PhraseSet resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromPhraseSetName(phraseSetName) {\n    return this.pathTemplates.phraseSetPathTemplate.match(phraseSetName).project;\n  }\n  /**\n   * Parse the location from PhraseSet resource.\n   *\n   * @param {string} phraseSetName\n   *   A fully-qualified path representing PhraseSet resource.\n   * @returns {string} A string representing the location.\n   */\n  matchLocationFromPhraseSetName(phraseSetName) {\n    return this.pathTemplates.phraseSetPathTemplate.match(phraseSetName).location;\n  }\n  /**\n   * Parse the phrase_set from PhraseSet resource.\n   *\n   * @param {string} phraseSetName\n   *   A fully-qualified path representing PhraseSet resource.\n   * @returns {string} A string representing the phrase_set.\n   */\n  matchPhraseSetFromPhraseSetName(phraseSetName) {\n    return this.pathTemplates.phraseSetPathTemplate.match(phraseSetName).phrase_set;\n  }\n  /**\n   * Terminate the gRPC channel and close the client.\n   *\n   * The client will no longer be usable and all future behavior is undefined.\n   * @returns {Promise} A promise that resolves when the client is closed.\n   */\n  close() {\n    if (this.speechStub && !this._terminated) {\n      return this.speechStub.then(stub => {\n        this._terminated = true;\n        stub.close();\n        this.operationsClient.close();\n      });\n    }\n    return Promise.resolve();\n  }\n}\nexports.SpeechClient = SpeechClient;","map":{"version":3,"names":["Object","defineProperty","exports","value","SpeechClient","stream_1","require","jsonProtos","gapicConfig","version","constructor","opts","gaxInstance","_a","_b","_c","_d","_e","_terminated","descriptors","page","stream","longrunning","batching","staticMembers","universe_domain","universeDomain","Error","universeDomainEnvVar","process","env","undefined","_universeDomain","_servicePath","servicePath","apiEndpoint","_providedCustomServicePath","port","clientConfig","fallback","window","fetch","assign","numericEnums","scopes","_gaxModule","_gaxGrpc","GrpcClient","_opts","auth","useJWTAccessWithScope","defaultServicePath","defaultScopes","clientHeader","push","versions","node","grpcVersion","libName","libVersion","_protos","loadProtoJSON","pathTemplates","customClassPathTemplate","PathTemplate","phraseSetPathTemplate","streamingRecognize","StreamDescriptor","StreamType","BIDI_STREAMING","protoFilesRoot","protobuf","Root","fromJSON","lroOptions","grpc","protoJson","httpRules","selector","get","operationsClient","lro","longRunningRecognizeResponse","lookup","longRunningRecognizeMetadata","longRunningRecognize","LongrunningDescriptor","decode","bind","_defaults","constructSettings","join","innerApiCalls","warn","initialize","speechStub","createStub","lookupService","google","cloud","speech","v1p1beta1","Speech","speechStubMethods","methodName","callPromise","then","stub","PassThrough","setImmediate","emit","GoogleError","Promise","reject","func","args","apply","err","descriptor","apiCall","createApiCall","emitWarning","getProjectId","callback","recognize","request","optionsOrCallback","options","otherArgs","headers","_streamingRecognize","checkLongRunningRecognizeProgress","name","operationsProtos","GetOperationRequest","operation","getOperation","decodeOperation","Operation","createDefaultBackoffSettings","listOperationsAsync","cancelOperation","deleteOperation","customClassPath","project","location","customClass","render","custom_class","matchProjectFromCustomClassName","customClassName","match","matchLocationFromCustomClassName","matchCustomClassFromCustomClassName","phraseSetPath","phraseSet","phrase_set","matchProjectFromPhraseSetName","phraseSetName","matchLocationFromPhraseSetName","matchPhraseSetFromPhraseSetName","close","resolve"],"sources":["C:/Users/anany/OneDrive/Desktop/DTI/frontend/node_modules/@google-cloud/speech/build/src/v1p1beta1/speech_client.js"],"sourcesContent":["\"use strict\";\n// Copyright 2024 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SpeechClient = void 0;\nconst stream_1 = require(\"stream\");\nconst jsonProtos = require(\"../../protos/protos.json\");\n/**\n * Client JSON configuration object, loaded from\n * `src/v1p1beta1/speech_client_config.json`.\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\nconst gapicConfig = require(\"./speech_client_config.json\");\nconst version = require('../../../package.json').version;\n/**\n *  Service that implements Google Cloud Speech API.\n * @class\n * @memberof v1p1beta1\n */\nclass SpeechClient {\n    /**\n     * Construct an instance of SpeechClient.\n     *\n     * @param {object} [options] - The configuration object.\n     * The options accepted by the constructor are described in detail\n     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).\n     * The common options are:\n     * @param {object} [options.credentials] - Credentials object.\n     * @param {string} [options.credentials.client_email]\n     * @param {string} [options.credentials.private_key]\n     * @param {string} [options.email] - Account email address. Required when\n     *     using a .pem or .p12 keyFilename.\n     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n     *     .p12 key downloaded from the Google Developers Console. If you provide\n     *     a path to a JSON file, the projectId option below is not necessary.\n     *     NOTE: .pem and .p12 require you to specify options.email as well.\n     * @param {number} [options.port] - The port on which to connect to\n     *     the remote host.\n     * @param {string} [options.projectId] - The project ID from the Google\n     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n     *     the environment variable GCLOUD_PROJECT for your project ID. If your\n     *     app is running in an environment which supports\n     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n     *     your project ID will be detected automatically.\n     * @param {string} [options.apiEndpoint] - The domain name of the\n     *     API remote host.\n     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n     *     Follows the structure of {@link gapicConfig}.\n     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.\n     *     For more information, please check the\n     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.\n     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you\n     *     need to avoid loading the default gRPC version and want to use the fallback\n     *     HTTP implementation. Load only fallback version and pass it to the constructor:\n     *     ```\n     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC\n     *     const client = new SpeechClient({fallback: true}, gax);\n     *     ```\n     */\n    constructor(opts, gaxInstance) {\n        var _a, _b, _c, _d, _e;\n        this._terminated = false;\n        this.descriptors = {\n            page: {},\n            stream: {},\n            longrunning: {},\n            batching: {},\n        };\n        // Ensure that options include all the required fields.\n        const staticMembers = this.constructor;\n        if ((opts === null || opts === void 0 ? void 0 : opts.universe_domain) &&\n            (opts === null || opts === void 0 ? void 0 : opts.universeDomain) &&\n            (opts === null || opts === void 0 ? void 0 : opts.universe_domain) !== (opts === null || opts === void 0 ? void 0 : opts.universeDomain)) {\n            throw new Error('Please set either universe_domain or universeDomain, but not both.');\n        }\n        const universeDomainEnvVar = typeof process === 'object' && typeof process.env === 'object'\n            ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']\n            : undefined;\n        this._universeDomain =\n            (_c = (_b = (_a = opts === null || opts === void 0 ? void 0 : opts.universeDomain) !== null && _a !== void 0 ? _a : opts === null || opts === void 0 ? void 0 : opts.universe_domain) !== null && _b !== void 0 ? _b : universeDomainEnvVar) !== null && _c !== void 0 ? _c : 'googleapis.com';\n        this._servicePath = 'speech.' + this._universeDomain;\n        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || this._servicePath;\n        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));\n        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n        const clientConfig = (_d = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _d !== void 0 ? _d : {};\n        const fallback = (_e = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _e !== void 0 ? _e : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');\n        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);\n        // Request numeric enum values if REST transport is used.\n        opts.numericEnums = true;\n        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n        if (servicePath !== this._servicePath && !('scopes' in opts)) {\n            opts['scopes'] = staticMembers.scopes;\n        }\n        // Load google-gax module synchronously if needed\n        if (!gaxInstance) {\n            gaxInstance = require('google-gax');\n        }\n        // Choose either gRPC or proto-over-HTTP implementation of google-gax.\n        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;\n        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.\n        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);\n        // Save options to use in initialize() method.\n        this._opts = opts;\n        // Save the auth object to the client, for use by other methods.\n        this.auth = this._gaxGrpc.auth;\n        // Set useJWTAccessWithScope on the auth object.\n        this.auth.useJWTAccessWithScope = true;\n        // Set defaultServicePath on the auth object.\n        this.auth.defaultServicePath = this._servicePath;\n        // Set the default scopes in auth client if needed.\n        if (servicePath === this._servicePath) {\n            this.auth.defaultScopes = staticMembers.scopes;\n        }\n        // Determine the client header string.\n        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n        if (typeof process === 'object' && 'versions' in process) {\n            clientHeader.push(`gl-node/${process.versions.node}`);\n        }\n        else {\n            clientHeader.push(`gl-web/${this._gaxModule.version}`);\n        }\n        if (!opts.fallback) {\n            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n        }\n        else {\n            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);\n        }\n        if (opts.libName && opts.libVersion) {\n            clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n        }\n        // Load the applicable protos.\n        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);\n        // This API contains \"path templates\"; forward-slash-separated\n        // identifiers to uniquely identify resources within the API.\n        // Create useful helper objects for these.\n        this.pathTemplates = {\n            customClassPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/customClasses/{custom_class}'),\n            phraseSetPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/phraseSets/{phrase_set}'),\n        };\n        // Some of the methods on this service provide streaming responses.\n        // Provide descriptors for these.\n        this.descriptors.stream = {\n            streamingRecognize: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.BIDI_STREAMING, !!opts.fallback, \n            /* gaxStreamingRetries: */ false),\n        };\n        const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);\n        // This API contains \"long-running operations\", which return a\n        // an Operation object that allows for tracking of the operation,\n        // rather than holding a request open.\n        const lroOptions = {\n            auth: this.auth,\n            grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,\n        };\n        if (opts.fallback) {\n            lroOptions.protoJson = protoFilesRoot;\n            lroOptions.httpRules = [\n                {\n                    selector: 'google.longrunning.Operations.GetOperation',\n                    get: '/v1p1beta1/operations/{name=**}',\n                },\n                {\n                    selector: 'google.longrunning.Operations.ListOperations',\n                    get: '/v1p1beta1/operations',\n                },\n            ];\n        }\n        this.operationsClient = this._gaxModule\n            .lro(lroOptions)\n            .operationsClient(opts);\n        const longRunningRecognizeResponse = protoFilesRoot.lookup('.google.cloud.speech.v1p1beta1.LongRunningRecognizeResponse');\n        const longRunningRecognizeMetadata = protoFilesRoot.lookup('.google.cloud.speech.v1p1beta1.LongRunningRecognizeMetadata');\n        this.descriptors.longrunning = {\n            longRunningRecognize: new this._gaxModule.LongrunningDescriptor(this.operationsClient, longRunningRecognizeResponse.decode.bind(longRunningRecognizeResponse), longRunningRecognizeMetadata.decode.bind(longRunningRecognizeMetadata)),\n        };\n        // Put together the default options sent with requests.\n        this._defaults = this._gaxGrpc.constructSettings('google.cloud.speech.v1p1beta1.Speech', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });\n        // Set up a dictionary of \"inner API calls\"; the core implementation\n        // of calling the API is handled in `google-gax`, with this code\n        // merely providing the destination and request information.\n        this.innerApiCalls = {};\n        // Add a warn function to the client constructor so it can be easily tested.\n        this.warn = this._gaxModule.warn;\n    }\n    /**\n     * Initialize the client.\n     * Performs asynchronous operations (such as authentication) and prepares the client.\n     * This function will be called automatically when any class method is called for the\n     * first time, but if you need to initialize it before calling an actual method,\n     * feel free to call initialize() directly.\n     *\n     * You can await on this method if you want to make sure the client is initialized.\n     *\n     * @returns {Promise} A promise that resolves to an authenticated service stub.\n     */\n    initialize() {\n        // If the client stub promise is already initialized, return immediately.\n        if (this.speechStub) {\n            return this.speechStub;\n        }\n        // Put together the \"service stub\" for\n        // google.cloud.speech.v1p1beta1.Speech.\n        this.speechStub = this._gaxGrpc.createStub(this._opts.fallback\n            ? this._protos.lookupService('google.cloud.speech.v1p1beta1.Speech')\n            : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this._protos.google.cloud.speech.v1p1beta1.Speech, this._opts, this._providedCustomServicePath);\n        // Iterate over each of the methods that the service provides\n        // and create an API call method for each.\n        const speechStubMethods = [\n            'recognize',\n            'longRunningRecognize',\n            'streamingRecognize',\n        ];\n        for (const methodName of speechStubMethods) {\n            const callPromise = this.speechStub.then(stub => (...args) => {\n                if (this._terminated) {\n                    if (methodName in this.descriptors.stream) {\n                        const stream = new stream_1.PassThrough();\n                        setImmediate(() => {\n                            stream.emit('error', new this._gaxModule.GoogleError('The client has already been closed.'));\n                        });\n                        return stream;\n                    }\n                    return Promise.reject('The client has already been closed.');\n                }\n                const func = stub[methodName];\n                return func.apply(stub, args);\n            }, (err) => () => {\n                throw err;\n            });\n            const descriptor = this.descriptors.stream[methodName] ||\n                this.descriptors.longrunning[methodName] ||\n                undefined;\n            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);\n            this.innerApiCalls[methodName] = apiCall;\n        }\n        return this.speechStub;\n    }\n    /**\n     * The DNS address for this API service.\n     * @deprecated Use the apiEndpoint method of the client instance.\n     * @returns {string} The DNS address for this service.\n     */\n    static get servicePath() {\n        if (typeof process === 'object' &&\n            typeof process.emitWarning === 'function') {\n            process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');\n        }\n        return 'speech.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service - same as servicePath.\n     * @deprecated Use the apiEndpoint method of the client instance.\n     * @returns {string} The DNS address for this service.\n     */\n    static get apiEndpoint() {\n        if (typeof process === 'object' &&\n            typeof process.emitWarning === 'function') {\n            process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');\n        }\n        return 'speech.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service.\n     * @returns {string} The DNS address for this service.\n     */\n    get apiEndpoint() {\n        return this._servicePath;\n    }\n    get universeDomain() {\n        return this._universeDomain;\n    }\n    /**\n     * The port for this API service.\n     * @returns {number} The default port for this service.\n     */\n    static get port() {\n        return 443;\n    }\n    /**\n     * The scopes needed to make gRPC calls for every method defined\n     * in this service.\n     * @returns {string[]} List of default scopes.\n     */\n    static get scopes() {\n        return ['https://www.googleapis.com/auth/cloud-platform'];\n    }\n    /**\n     * Return the project ID used by this class.\n     * @returns {Promise} A promise that resolves to string containing the project ID.\n     */\n    getProjectId(callback) {\n        if (callback) {\n            this.auth.getProjectId(callback);\n            return;\n        }\n        return this.auth.getProjectId();\n    }\n    recognize(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        this.initialize();\n        return this.innerApiCalls.recognize(request, options, callback);\n    }\n    /**\n     * Performs bidirectional streaming speech recognition: receive results while\n     * sending audio. This method is only available via the gRPC API (not REST).\n     *\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which is both readable and writable. It accepts objects\n     *   representing {@link protos.google.cloud.speech.v1p1beta1.StreamingRecognizeRequest|StreamingRecognizeRequest} for write() method, and\n     *   will emit objects representing {@link protos.google.cloud.speech.v1p1beta1.StreamingRecognizeResponse|StreamingRecognizeResponse} on 'data' event asynchronously.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#bi-directional-streaming | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1p1beta1/speech.streaming_recognize.js</caption>\n     * region_tag:speech_v1p1beta1_generated_Speech_StreamingRecognize_async\n     */\n    _streamingRecognize(options) {\n        this.initialize();\n        return this.innerApiCalls.streamingRecognize(null, options);\n    }\n    longRunningRecognize(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        this.initialize();\n        return this.innerApiCalls.longRunningRecognize(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by `longRunningRecognize()`.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1p1beta1/speech.long_running_recognize.js</caption>\n     * region_tag:speech_v1p1beta1_generated_Speech_LongRunningRecognize_async\n     */\n    async checkLongRunningRecognizeProgress(name) {\n        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });\n        const [operation] = await this.operationsClient.getOperation(request);\n        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.longRunningRecognize, this._gaxModule.createDefaultBackoffSettings());\n        return decodeOperation;\n    }\n    /**\n     * Gets the latest state of a long-running operation.  Clients can use this\n     * method to poll the operation result at intervals as recommended by the API\n     * service.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation resource.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     *   e.g, timeout, retries, paginations, etc. See {@link\n     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}\n     *   for the details.\n     * @param {function(?Error, ?Object)=} callback\n     *   The function which will be called with the result of the API call.\n     *\n     *   The second parameter to the callback is an object representing\n     *   {@link google.longrunning.Operation | google.longrunning.Operation}.\n     * @return {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing\n     * {@link google.longrunning.Operation | google.longrunning.Operation}.\n     * The promise has a method named \"cancel\" which cancels the ongoing API call.\n     *\n     * @example\n     * ```\n     * const client = longrunning.operationsClient();\n     * const name = '';\n     * const [response] = await client.getOperation({name});\n     * // doThingsWith(response)\n     * ```\n     */\n    getOperation(request, options, callback) {\n        return this.operationsClient.getOperation(request, options, callback);\n    }\n    /**\n     * Lists operations that match the specified filter in the request. If the\n     * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.\n     *\n     * For-await-of syntax is used with the iterable to recursively get response element on-demand.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation collection.\n     * @param {string} request.filter - The standard list filter.\n     * @param {number=} request.pageSize -\n     *   The maximum number of resources contained in the underlying API\n     *   response. If page streaming is performed per-resource, this\n     *   parameter does not affect the return value. If page streaming is\n     *   performed per-page, this determines the maximum number of\n     *   resources in a page.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     *   e.g, timeout, retries, paginations, etc. See {@link\n     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the\n     *   details.\n     * @returns {Object}\n     *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.\n     *\n     * @example\n     * ```\n     * const client = longrunning.operationsClient();\n     * for await (const response of client.listOperationsAsync(request));\n     * // doThingsWith(response)\n     * ```\n     */\n    listOperationsAsync(request, options) {\n        return this.operationsClient.listOperationsAsync(request, options);\n    }\n    /**\n     * Starts asynchronous cancellation on a long-running operation.  The server\n     * makes a best effort to cancel the operation, but success is not\n     * guaranteed.  If the server doesn't support this method, it returns\n     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use\n     * {@link Operations.GetOperation} or\n     * other methods to check whether the cancellation succeeded or whether the\n     * operation completed despite cancellation. On successful cancellation,\n     * the operation is not deleted; instead, it becomes an operation with\n     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of\n     * 1, corresponding to `Code.CANCELLED`.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation resource to be cancelled.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     * e.g, timeout, retries, paginations, etc. See {@link\n     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the\n     * details.\n     * @param {function(?Error)=} callback\n     *   The function which will be called with the result of the API call.\n     * @return {Promise} - The promise which resolves when API call finishes.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API\n     * call.\n     *\n     * @example\n     * ```\n     * const client = longrunning.operationsClient();\n     * await client.cancelOperation({name: ''});\n     * ```\n     */\n    cancelOperation(request, options, callback) {\n        return this.operationsClient.cancelOperation(request, options, callback);\n    }\n    /**\n     * Deletes a long-running operation. This method indicates that the client is\n     * no longer interested in the operation result. It does not cancel the\n     * operation. If the server doesn't support this method, it returns\n     * `google.rpc.Code.UNIMPLEMENTED`.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation resource to be deleted.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     * e.g, timeout, retries, paginations, etc. See {@link\n     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}\n     * for the details.\n     * @param {function(?Error)=} callback\n     *   The function which will be called with the result of the API call.\n     * @return {Promise} - The promise which resolves when API call finishes.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API\n     * call.\n     *\n     * @example\n     * ```\n     * const client = longrunning.operationsClient();\n     * await client.deleteOperation({name: ''});\n     * ```\n     */\n    deleteOperation(request, options, callback) {\n        return this.operationsClient.deleteOperation(request, options, callback);\n    }\n    // --------------------\n    // -- Path templates --\n    // --------------------\n    /**\n     * Return a fully-qualified customClass resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @param {string} custom_class\n     * @returns {string} Resource name string.\n     */\n    customClassPath(project, location, customClass) {\n        return this.pathTemplates.customClassPathTemplate.render({\n            project: project,\n            location: location,\n            custom_class: customClass,\n        });\n    }\n    /**\n     * Parse the project from CustomClass resource.\n     *\n     * @param {string} customClassName\n     *   A fully-qualified path representing CustomClass resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromCustomClassName(customClassName) {\n        return this.pathTemplates.customClassPathTemplate.match(customClassName)\n            .project;\n    }\n    /**\n     * Parse the location from CustomClass resource.\n     *\n     * @param {string} customClassName\n     *   A fully-qualified path representing CustomClass resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromCustomClassName(customClassName) {\n        return this.pathTemplates.customClassPathTemplate.match(customClassName)\n            .location;\n    }\n    /**\n     * Parse the custom_class from CustomClass resource.\n     *\n     * @param {string} customClassName\n     *   A fully-qualified path representing CustomClass resource.\n     * @returns {string} A string representing the custom_class.\n     */\n    matchCustomClassFromCustomClassName(customClassName) {\n        return this.pathTemplates.customClassPathTemplate.match(customClassName)\n            .custom_class;\n    }\n    /**\n     * Return a fully-qualified phraseSet resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @param {string} phrase_set\n     * @returns {string} Resource name string.\n     */\n    phraseSetPath(project, location, phraseSet) {\n        return this.pathTemplates.phraseSetPathTemplate.render({\n            project: project,\n            location: location,\n            phrase_set: phraseSet,\n        });\n    }\n    /**\n     * Parse the project from PhraseSet resource.\n     *\n     * @param {string} phraseSetName\n     *   A fully-qualified path representing PhraseSet resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromPhraseSetName(phraseSetName) {\n        return this.pathTemplates.phraseSetPathTemplate.match(phraseSetName)\n            .project;\n    }\n    /**\n     * Parse the location from PhraseSet resource.\n     *\n     * @param {string} phraseSetName\n     *   A fully-qualified path representing PhraseSet resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromPhraseSetName(phraseSetName) {\n        return this.pathTemplates.phraseSetPathTemplate.match(phraseSetName)\n            .location;\n    }\n    /**\n     * Parse the phrase_set from PhraseSet resource.\n     *\n     * @param {string} phraseSetName\n     *   A fully-qualified path representing PhraseSet resource.\n     * @returns {string} A string representing the phrase_set.\n     */\n    matchPhraseSetFromPhraseSetName(phraseSetName) {\n        return this.pathTemplates.phraseSetPathTemplate.match(phraseSetName)\n            .phrase_set;\n    }\n    /**\n     * Terminate the gRPC channel and close the client.\n     *\n     * The client will no longer be usable and all future behavior is undefined.\n     * @returns {Promise} A promise that resolves when the client is closed.\n     */\n    close() {\n        if (this.speechStub && !this._terminated) {\n            return this.speechStub.then(stub => {\n                this._terminated = true;\n                stub.close();\n                this.operationsClient.close();\n            });\n        }\n        return Promise.resolve();\n    }\n}\nexports.SpeechClient = SpeechClient;\n//# sourceMappingURL=speech_client.js.map"],"mappings":"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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIiB,mBAAmB,CAACf,OAAO,EAAEE,OAAO,EAAE;IAClC,OAAO,IAAI,CAAC/C,gBAAgB,CAAC4D,mBAAmB,CAACf,OAAO,EAAEE,OAAO,CAAC;EACtE;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIc,eAAe,CAAChB,OAAO,EAAEE,OAAO,EAAEJ,QAAQ,EAAE;IACxC,OAAO,IAAI,CAAC3C,gBAAgB,CAAC6D,eAAe,CAAChB,OAAO,EAAEE,OAAO,EAAEJ,QAAQ,CAAC;EAC5E;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACImB,eAAe,CAACjB,OAAO,EAAEE,OAAO,EAAEJ,QAAQ,EAAE;IACxC,OAAO,IAAI,CAAC3C,gBAAgB,CAAC8D,eAAe,CAACjB,OAAO,EAAEE,OAAO,EAAEJ,QAAQ,CAAC;EAC5E;EACA;EACA;EACA;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIoB,eAAe,CAACC,OAAO,EAAEC,QAAQ,EAAEC,WAAW,EAAE;IAC5C,OAAO,IAAI,CAACpF,aAAa,CAACC,uBAAuB,CAACoF,MAAM,CAAC;MACrDH,OAAO,EAAEA,OAAO;MAChBC,QAAQ,EAAEA,QAAQ;MAClBG,YAAY,EAAEF;IAClB,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIG,+BAA+B,CAACC,eAAe,EAAE;IAC7C,OAAO,IAAI,CAACxF,aAAa,CAACC,uBAAuB,CAACwF,KAAK,CAACD,eAAe,CAAC,CACnEN,OAAO;EAChB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIQ,gCAAgC,CAACF,eAAe,EAAE;IAC9C,OAAO,IAAI,CAACxF,aAAa,CAACC,uBAAuB,CAACwF,KAAK,CAACD,eAAe,CAAC,CACnEL,QAAQ;EACjB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIQ,mCAAmC,CAACH,eAAe,EAAE;IACjD,OAAO,IAAI,CAACxF,aAAa,CAACC,uBAAuB,CAACwF,KAAK,CAACD,eAAe,CAAC,CACnEF,YAAY;EACrB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIM,aAAa,CAACV,OAAO,EAAEC,QAAQ,EAAEU,SAAS,EAAE;IACxC,OAAO,IAAI,CAAC7F,aAAa,CAACG,qBAAqB,CAACkF,MAAM,CAAC;MACnDH,OAAO,EAAEA,OAAO;MAChBC,QAAQ,EAAEA,QAAQ;MAClBW,UAAU,EAAED;IAChB,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIE,6BAA6B,CAACC,aAAa,EAAE;IACzC,OAAO,IAAI,CAAChG,aAAa,CAACG,qBAAqB,CAACsF,KAAK,CAACO,aAAa,CAAC,CAC/Dd,OAAO;EAChB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIe,8BAA8B,CAACD,aAAa,EAAE;IAC1C,OAAO,IAAI,CAAChG,aAAa,CAACG,qBAAqB,CAACsF,KAAK,CAACO,aAAa,CAAC,CAC/Db,QAAQ;EACjB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIe,+BAA+B,CAACF,aAAa,EAAE;IAC3C,OAAO,IAAI,CAAChG,aAAa,CAACG,qBAAqB,CAACsF,KAAK,CAACO,aAAa,CAAC,CAC/DF,UAAU;EACnB;EACA;AACJ;AACA;AACA;AACA;AACA;EACIK,KAAK,GAAG;IACJ,IAAI,IAAI,CAAClE,UAAU,IAAI,CAAC,IAAI,CAAC7E,WAAW,EAAE;MACtC,OAAO,IAAI,CAAC6E,UAAU,CAACW,IAAI,CAACC,IAAI,IAAI;QAChC,IAAI,CAACzF,WAAW,GAAG,IAAI;QACvByF,IAAI,CAACsD,KAAK,EAAE;QACZ,IAAI,CAACjF,gBAAgB,CAACiF,KAAK,EAAE;MACjC,CAAC,CAAC;IACN;IACA,OAAOjD,OAAO,CAACkD,OAAO,EAAE;EAC5B;AACJ;AACAhK,OAAO,CAACE,YAAY,GAAGA,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}